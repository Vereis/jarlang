29/9
@ everyone - start looking and playing around with erlang and try to capture its behaviour
@ everyone - think about datatypes, how should we decide how to model things like floats/lists?
             string optimisation should keep strings as JS strings?
@ notes - Integer    -> Custom Integer class
@ notes - Float      -> Custom Float class
@ notes - $char      -> String with length of 1
@ notes - String     -> String where length > 1
@ notes - Atom       -> Custom Atom class 
@ notes - base#value -> Custom class wrapping an object such as {base: Number, value: Number} with a toInt() / toFloat() function
@ notes - Bit Strings, Binary -> Custom class essentially wrapping an Array<Number>
@ notes - Fun        -> Function
@ notes - Port Identifier -> None // We don't have any special access to ports from JavaScript
@ notes - PID        -> Custom class that roughly looks like {pid: Array<Number>} // Where Array is split by "."
@ notes - Tuple      -> Custom Tuple class
@ notes - Map        -> Standard Object
@ notes - List       -> Custom List class
@ notes - Records    -> Undecided
@ notes - Boolean    -> Boolean
@ Chris - look at modelling function overloading and module implementation
@ Andrew - write some sample erlang programs for testing later on
@ Nick - look at writing a testing system? shell script?

6/10
@ Done - example module architecture with function overloading and private/public functions
@ Done - 99 bottles of beer example
@ Done - andrew's examples
@ Remove old lexer, fall back on Erlang compiler to generate Core Erlang
@ Everyone - continue with previous tasks if not done, otherwise think about architecture implementation

13/10
@ Done - base modules created which outline compiler pipeline
@ Done - got core erlang generated into a file from compiler, need to look into getting its AST
@ Andrew - get core erlang ast outputted
@ Nick - look at getting line numbers for erlang programs kept in core erlang? Luvviescript makes this sound hard
@ Chris - Look more on getting this architected nicely - we probably want a makefile?

20/10
@ Done - makefile, core erlang ast is now parsed and written out to a file
@ Chris/Andrew - reverse engineer core erlang AST, what does each node mean or do?
@ Chris - look at how the JavaScript AST works
@ Nick - keep working on preserving line numbers for now, add Git CI testing

27/10
@ Done - JavaScript AST fairly well understood, wrote JSON library to write out to JSON.
         Got a very basic module implementation working using said JSON library thanks to Chris.
         Much more progress being done on reverse engineering core erlang
         Line numbers and stuff added to external module - looks like it works
@ Scrapped - removed CI stuff, requires OTP style project which we don't have and don't want to investigate further for now
@ Chris - write interface for JavaScript AST
@ Andrew - work with Chris, when Chris is done, work on writing a module to translate Erlang AST nodes into JavaScript ones
@ Nick - Work with Chris and Andrew to get line numbers preserved for us to generate source maps 

3/11
@ Done - thanks to chris and andrew, we can generate empty modules now!
         thanks to nick, we now have line numbers preserved though we can't use this just yet.
         thanks to chris, we have an example of how we might implement lists and tuples in JS

10/11
@ Chris - JavaScript AST now includes rudimentary type checking

17/11
@ Done - Thanks to Chris and Andrew, we can now transpile rudimentary modules of very simple Erlang.
@ Chris - Upgraded the JavaScript AST typechecking
        - Attempted implementing Rebar3 usage, determined to be unsuitible
        - Added dialyser tests to make file
@ Andrew - Implemented return tracking, return statements now added at the end of functions
         - Basic arithmetic, logic operators and functions with more than 1 operation now transpile
         - Place holder datatypes & erlang core modules
@ Nick - Started implementing Erlang numbers using BigNumber

28/11
@ Done - Factorial now works
@ Nick - Continued work on ErlNumbers, they now work on browser and node.js
@ Chris - ParseFunction is now concurrent & assignmentExpression added
@ Andrew - Added datatype stubs & basic pattern matching works
         - Case statements sort-of work
         - let & apply (calls in a call & local funcitons) now work

8/12
@ Nick - Most of the map datatype is now implemented

15/12
@ Chris - Has done extensive refactoring & code standards enforcement

7/2
@ Done - List comprehensions now work. Lists module from the stdlib transpiles
@ Nick - Strings are now handled like lists of chars
       - Basic parts of io:format implemented
@ Chris - Jarlang now builds into a binary executible using ErlPKG
        - furthur refactoring & code clean-up
@ Andrew - Try tokens in case statements have no apparent purpose, so are parsed as simple wrappers
         - Added an output type option to aid in debugging
         - Evaluate section of case statements encapsulated
         - Aliases, lists functions as variables & functions in case statements now transpile

15/2
@ Nick - Implemented BIFs
       - Corrected bitstring constructor
@ Andrew - Refactored asttrans.erl, regretting not doing it sooner
         - Tuples that contain only literals are literals themselves
@ Chris - Added Jarlang runtime system, including process "concurrency"
        - Updated build process to output es5,es6 or min files
        - Variable conversion in & out of transpiled files

21/2
@ Chris - Automatic process wrapping when functions are called from outside
        - Changed datatype classes to es6 constructors
@ Nick - Separated Int & Float types
@ Andrew - Rebuilt matching completely, now should work properly

1/3
@ Nick - Maps now use key val stores
@ Andrew - Refactored function wrapping

9/3
@ Andrew - Made asttrans.erl neater, with less dead code & more comments

16/3
@ Chris - Implemented erlang BIFs used for message passing
@ Andrew - Message receive now works

23/3
@ Andrew - Started LaTeX files for Technical report, got the format template working
@ Nick - Improved bitstring some more
@ everyone - Completed first draft of technical report

28/3
@ everyone - Second draft of technical report done
