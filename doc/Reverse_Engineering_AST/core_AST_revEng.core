module 'core_AST_revEng' ['addition'/1,
			  'boolean'/0,
			  'division'/1,
			  'echo'/1,
			  'errIfNot3'/1,
			  'errIfNot3Tuple'/1,
			  'errIfNot3and3'/2,
			  'integer'/0,
			  'module_info'/0,
			  'module_info'/1,
			  'multiplication'/1,
			  'sequence'/0,
			  'string'/0,
			  'subtraction'/1]
    attributes [%% Line 1
		'file' =
		    %% Line 1
		    [{[99|[111|[114|[101|[95|[65|[83|[84|[95|[114|[101|[118|[69|[110|[103|[46|[101|[114|[108]]]]]]]]]]]]]]]]]]],1}]]
'boolean'/0 =
    %% Line 15
    fun () ->
	'true'
'integer'/0 =
    %% Line 16
    fun () ->
	3
'string'/0 =
    %% Line 17
    fun () ->
	[72|[101|[108|[108|[111|[44|[32|[119|[111|[114|[108|[100|[33]]]]]]]]]]]]]
'addition'/1 =
    %% Line 19
    fun (_@c0) ->
	call 'erlang':'+'
	    (_@c0, 3)
'subtraction'/1 =
    %% Line 20
    fun (_@c0) ->
	call 'erlang':'-'
	    (_@c0, 3)
'multiplication'/1 =
    %% Line 22
    fun (_@c0) ->
	call 'erlang':'*'
	    (_@c0, 3)
'division'/1 =
    %% Line 23
    fun (_@c0) ->
	call 'erlang':'/'
	    (_@c0, 3)
'echo'/1 =
    %% Line 25
    fun (_@c0) ->
	_@c0
'sequence'/0 =
    %% Line 27
    fun () ->
	do  %% Line 28
	    call 'io':'format'
		([65])
	    do  %% Line 29
		call 'io':'format'
		    ([66])
		%% Line 30
		call 'io':'format'
		    ([67])
'errIfNot3'/1 =
    %% Line 32
    fun (_@c0) ->
	%% Line 33
	case _@c0 of
	  <3> when 'true' ->
	      _@c0
	  ( <_@c1> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_@c1})
	    -| ['compiler_generated'] )
	end
'errIfNot3Tuple'/1 =
    %% Line 35
    fun (_@c0) ->
	%% Line 36
	case _@c0 of
	  <3> when 'true' ->
	      ( {_@c0,( 'atom'
			-| ['compiler_generated'] )}
		-| ['compiler_generated'] )
	  ( <( _@f6
	       -| ['compiler_generated'] )> when 'true' ->
		let <_@c1> = {( _@f6
		       -| ['compiler_generated'] ),( 'atom'
						     -| ['compiler_generated'] )}
		in  primop 'match_fail'
			({'badmatch',_@c1})
	    -| ['compiler_generated'] )
	end
'errIfNot3and3'/2 =
    %% Line 38
    fun (_@c1,_@c0) ->
	%% Line 39
	case <_@c1,_@c0> of
	  <3,3> when 'true' ->
	      ( {_@c1,_@c0}
		-| ['compiler_generated'] )
	  ( <( _@f9
	       -| ['compiler_generated'] ),( _@f10
					     -| ['compiler_generated'] )> when 'true' ->
		let <_@c2> = {( _@f9
		       -| ['compiler_generated'] ),( _@f10
						     -| ['compiler_generated'] )}
		in  primop 'match_fail'
			({'badmatch',_@c2})
	    -| ['compiler_generated'] )
	end
'module_info'/0 =
    fun () ->
	call 'erlang':'get_module_info'
	    ('core_AST_revEng')
'module_info'/1 =
    fun (_@c0) ->
	call 'erlang':'get_module_info'
	    ('core_AST_revEng', _@c0)
end