if var == lit   {c_case,[],{c_var,[],'_cor0'},      [{c_clause,[                  ],           [{c_literal,[],match}],{c_literal,[],true},{c_literal,[],...
else block      {c_case,[],{c_var,[],'_cor0'},      [{c_clause,[compiler_generated],            [{c_var,[],'_cor1'}] ,{c_literal,[],true},{c_primop,[],...
if tup2==tup2   {c_case,[],{c_values,[],[..]},      [{c_clause,[],            [{c_literal,[],match},{c_literal,[],2}],{c_literal,[],true},{c_literal,[],...
if is a tup2    {c_case,[],{c_values,[],[..]},      [{c_clause,[],            [{c_var,[],'_cor6'},{c_var,[],'_cor7'}],{c_literal,[],true},{c_literal,[],...
onlyMatchOne    {c_case,[],{c_values,[],[..]},      [{c_clause,[],            [{c_var,[],'_cor5'},{c_literal,[compiler_generated],3}],....

var1==var2 case {c_case,[],{c_var,[],'_cor1'},      [{c_clause,[],            [{c_var,[],'_cor5'}],                   {c_call,[],       },{c_literal,[],...

conds defs self {c_case,[],{c_values,[],[]},        [{c_clause,[],            [],                                     {c_call,[],       },{c_literal,[],...
cds else expict {c_case,[],{c_values,[],[]},        [{c_clause,[],            [],                                     {c_literal,[],true},{c_literal,[],...
cds else cg     {c_case,[],{c_values,[],[]},        [{c_clause,[compiler_generated],[],                               {c_literal,[],true},{c_primop,[],...

conclusion:
for each clause make an if/elseif statement
condition for the if: for each var generate a comparison
Needs a pattern matching comparison for the conditions

else at end is not needed, compiler generates a tautological condition.