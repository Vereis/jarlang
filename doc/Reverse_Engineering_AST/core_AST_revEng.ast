{c_module,[],
    {c_literal,[],core_AST_revEng},
    [{c_var,[],{addition,1}},
     {c_var,[],{boolean,0}},
     {c_var,[],{division,1}},
     {c_var,[],{echo,1}},
     {c_var,[],{errIfNot3,1}},
     {c_var,[],{errIfNot3Tuple,1}},
     {c_var,[],{errIfNot3and3,2}},
     {c_var,[],{integer,0}},
     {c_var,[],{module_info,0}},
     {c_var,[],{module_info,1}},
     {c_var,[],{multiplication,1}},
     {c_var,[],{sequence,0}},
     {c_var,[],{string,0}},
     {c_var,[],{subtraction,1}}],
    [{{c_literal,[],file},{c_literal,[],[{"core_AST_revEng.erl",1}]}}],
    [{{c_var,[],{boolean,0}},{c_fun,[],[],{c_literal,[],true}}},
     {{c_var,[],{integer,0}},{c_fun,[],[],{c_literal,[],3}}},
     {{c_var,[],{string,0}},{c_fun,[],[],{c_literal,[],"Hello, world!"}}},
     {{c_var,[],{addition,1}},
      {c_fun,[],
          [{c_var,[],'_@c0'}],
          {c_call,[],
              {c_literal,[],erlang},
              {c_literal,[],'+'},
              [{c_var,[],'_@c0'},{c_literal,[],3}]}}},
     {{c_var,[],{subtraction,1}},
      {c_fun,[],
          [{c_var,[],'_@c0'}],
          {c_call,[],
              {c_literal,[],erlang},
              {c_literal,[],'-'},
              [{c_var,[],'_@c0'},{c_literal,[],3}]}}},
     {{c_var,[],{multiplication,1}},
      {c_fun,[],
          [{c_var,[],'_@c0'}],
          {c_call,[],
              {c_literal,[],erlang},
              {c_literal,[],'*'},
              [{c_var,[],'_@c0'},{c_literal,[],3}]}}},
     {{c_var,[],{division,1}},
      {c_fun,[],
          [{c_var,[],'_@c0'}],
          {c_call,[],
              {c_literal,[],erlang},
              {c_literal,[],'/'},
              [{c_var,[],'_@c0'},{c_literal,[],3}]}}},
     {{c_var,[],{echo,1}},{c_fun,[],[{c_var,[],'_@c0'}],{c_var,[],'_@c0'}}},
     {{c_var,[],{sequence,0}},
      {c_fun,[],[],
          {c_seq,[],
              {c_call,[],
                  {c_literal,[],io},
                  {c_literal,[],format},
                  [{c_literal,[],"A"}]},
              {c_seq,[],
                  {c_call,[],
                      {c_literal,[],io},
                      {c_literal,[],format},
                      [{c_literal,[],"B"}]},
                  {c_call,[],
                      {c_literal,[],io},
                      {c_literal,[],format},
                      [{c_literal,[],"C"}]}}}}},
     {{c_var,[],{errIfNot3,1}},
      {c_fun,[],
          [{c_var,[],'_@c0'}],
          {c_case,[],
              {c_var,[],'_@c0'},
              [{c_clause,[],
                   [{c_literal,[],3}],
                   {c_literal,[],true},
                   {c_var,[],'_@c0'}},
               {c_clause,
                   [compiler_generated],
                   [{c_var,[],'_@c1'}],
                   {c_literal,[],true},
                   {c_primop,[],
                       {c_literal,[],match_fail},
                       [{c_tuple,[],
                            [{c_literal,[],badmatch},
                             {c_var,[],'_@c1'}]}]}}]}}},
     {{c_var,[],{errIfNot3Tuple,1}},
      {c_fun,[],
          [{c_var,[],'_@c0'}],
          {c_case,[],
              {c_var,[],'_@c0'},
              [{c_clause,[],
                   [{c_literal,[],3}],
                   {c_literal,[],true},
                   {c_tuple,
                       [compiler_generated],
                       [{c_var,[],'_@c0'},
                        {c_literal,[compiler_generated],atom}]}},
               {c_clause,
                   [compiler_generated],
                   [{c_var,[compiler_generated],'_@f6'}],
                   {c_literal,[],true},
                   {c_let,[],
                       [{c_var,[],'_@c1'}],
                       {c_tuple,[],
                           [{c_var,[compiler_generated],'_@f6'},
                            {c_literal,[compiler_generated],atom}]},
                       {c_primop,[],
                           {c_literal,[],match_fail},
                           [{c_tuple,[],
                                [{c_literal,[],badmatch},
                                 {c_var,[],'_@c1'}]}]}}}]}}},
     {{c_var,[],{errIfNot3and3,2}},
      {c_fun,[],
          [{c_var,[],'_@c1'},{c_var,[],'_@c0'}],
          {c_case,[],
              {c_values,[],[{c_var,[],'_@c1'},{c_var,[],'_@c0'}]},
              [{c_clause,[],
                   [{c_literal,[],3},{c_literal,[],3}],
                   {c_literal,[],true},
                   {c_tuple,
                       [compiler_generated],
                       [{c_var,[],'_@c1'},{c_var,[],'_@c0'}]}},
               {c_clause,
                   [compiler_generated],
                   [{c_var,[compiler_generated],'_@f9'},
                    {c_var,[compiler_generated],'_@f10'}],
                   {c_literal,[],true},
                   {c_let,[],
                       [{c_var,[],'_@c2'}],
                       {c_tuple,[],
                           [{c_var,[compiler_generated],'_@f9'},
                            {c_var,[compiler_generated],'_@f10'}]},
                       {c_primop,[],
                           {c_literal,[],match_fail},
                           [{c_tuple,[],
                                [{c_literal,[],badmatch},
                                 {c_var,[],'_@c2'}]}]}}}]}}},
     {{c_var,[],{module_info,0}},
      {c_fun,[],[],
          {c_call,[],
              {c_literal,[],erlang},
              {c_literal,[],get_module_info},
              [{c_literal,[],core_AST_revEng}]}}},
     {{c_var,[],{module_info,1}},
      {c_fun,[],
          [{c_var,[],'_@c0'}],
          {c_call,[],
              {c_literal,[],erlang},
              {c_literal,[],get_module_info},
              [{c_literal,[],core_AST_revEng},{c_var,[],'_@c0'}]}}}]}